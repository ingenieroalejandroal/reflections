1. What happens when you initialize a repository? Why do you need to do it?

	Answer: It converts the current directory into a repository. It also creates a new .git file in it. 
	
2. How is the staging area different from the working directory and the repository? What value do you think it offers?
	Answer: The Staging area is a place where you can put the files that you want to commit to the repository. 
			It may contain several files or just one, and is very helpful because you are able to commit all changes
			with just one commit.
			
3. How can you use the staging area to make sure you have one commit per logical change?

	Answer: You might use 'git diff --staged' to find the difference you already made with the last commit. 
			In that way you may identify if all commits belongs to one logical. If not you might revert changes with 'git reset --hard'

4. 	What are some situations when branches would be helpful in keeping your history organized? 
	How would branches help?		
	
	Answer: Situation when you are doing some experimental changes. Or when you are adding features in parallel 
	to the master version. 
	
5. How do the diagrams help you visualize the branch structure?
	
	Answer: The diagrams let you identify the branch where you want to work on. Also let you see
	where see the reachability of the commits. 
	
6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Answer: The result would be a merged between branch A and B. Also the merged branch would be the master one. 
			Also the other branch must be deleted as it won't be needed any more. But just the label is deleted. 
			the commitIds are now port of master branch. 
			
7.  What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Answer: Pros: it warn you if there is any conflict, it allways shows you the ansestor version along with the two branches version. 
			Cons: It can't detect if there is any redundancy in the code, that's still a task of 
			the developer. 